openapi: "3.0.2"
info:
  title: ED Board API
  version: "1.0"
servers:
  - url: https://localhost:3001/api/edboard
tags: [{ name: "user" }, { name: "audit" }]
paths:
  /user/login:
    post:
      tags:
        - "user"
      description: Log in to API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: myUser
                password:
                  type: string
                  example: myPassword
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  token:
                    type: string
                    example: Bearer 102i3joekaxnz,mvnxcijzkvlckj
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid Username or Password
  /user/logout:
    post:
      tags:
        - "user"
      description: Audit user logging out
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: myUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User has logged out
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: username is required

  /user/verify:
    get:
      tags:
        - "user"
      description: verify if user is logged in
      parameters:
        - in: header
          name: token
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLoggedIn:
                    type: boolean
                    example: true
                  username:
                    type: string
                    example: myUsername
                  role:
                    type: string
                    enum: ["admin", "guest"]
                    example: admin
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLoggedIn:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Failed To Authenticate
  /user/register:
    post:
      tags:
        - "user"
      description: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: myUser
                password:
                  type: string
                  example: myPassword
                role:
                  type: string
                  example: admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User Registered
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username has already been taken
  /audit:
    get:
      tags:
        - "audit"
      description: view pages of audits
      parameters:
        - in: query
          name: auditPerPage
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: date
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  audits:
                    type: array
                    example: [{ _id: 1 }, { _id: 2 }, { _id: 3 }]
                  page:
                    type: integer
                    example: 0
                  filters:
                    type: object
                    example:
                      {
                        "$gt": "2022-05-24T00:00:00.000Z",
                        "$lt": "2022-05-25T00:00:00.000Z",
                      }
                  entries_per_page:
                    type: integer
                    example: 15
                  total_results:
                    type: integer
                    example: 10

  /audit/create:
    post:
      tags:
        - "audit"
      description: Create new audit trail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: myUser
                type:
                  type: string
                  example: login
                  enum: ["login", "logout", "edit-roster", "create-roster"]
                delta:
                  type: object
                  example: {}
                documentId:
                  type: string
                  example: 628db30b5ec7551a75939509

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Trail created
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: username is required
